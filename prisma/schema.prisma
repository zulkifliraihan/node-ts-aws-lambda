generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum TypeCourse {
  free
  paid
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String        @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  profiles     Profile?
  userHasRoles UserHasRole[]

  course        Course[]
  UserHasCourse UserHasCourse[]
  Invoice       Invoice[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  userHasRoles UserHasRole[]
}

model UserHasRole {
  id      Int  @id @default(autoincrement())
  user_id Int
  role_id Int
  user    User @relation(fields: [user_id], references: [id])
  role    Role @relation(fields: [role_id], references: [id])

  @@unique([user_id, role_id])
}

model Profile {
  id        Int       @id @default(autoincrement())
  user_id   Int       @unique
  firstName String    @db.VarChar(255)
  lastName  String    @db.VarChar(255)
  gender    Gender
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  user      User      @relation(fields: [user_id], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  course    Course[]
}

model StatusCourse {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  Course    Course[]
}

model Course {
  id              Int             @id @default(autoincrement())
  instructor_id   Int
  status_id       Int
  type_course     TypeCourse
  name            String          @db.VarChar(255)
  description     String          @db.Text
  quota           Int
  price           Int             @default(0)
  discount        Int             @default(0)
  start_register  DateTime
  finish_register DateTime?
  start_course    DateTime
  finish_course   DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  instructor      User            @relation(fields: [instructor_id], references: [id])
  status          StatusCourse    @relation(fields: [status_id], references: [id])
  categories      Category[]
  UserHasCourse   UserHasCourse[]
  Invoice         Invoice[]
}

model UserHasCourse {
  id        Int    @id @default(autoincrement())
  user_id   Int
  course_id Int
  user      User   @relation(fields: [user_id], references: [id])
  course    Course @relation(fields: [course_id], references: [id])

  @@unique([user_id, course_id])
}

model Invoice {
  id               Int       @id @default(autoincrement())
  user_id          Int
  course_id        Int
  invoice_number   String    @db.VarChar(255)
  status           String    @db.VarChar(255)
  total_payment    Int   
  paidAt           DateTime?
  expiredAt        DateTime
  extra_attributes Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  user             User      @relation(fields: [user_id], references: [id])
  course           Course    @relation(fields: [course_id], references: [id])
}
